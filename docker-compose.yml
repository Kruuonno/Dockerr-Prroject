version: '3.9'

services:
  traefik:
    container_name: traefik
    image: traefik:latest
    ports:
      - 80:80 
      - 443:443
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - type: volume
        source: acme-00
        target: /acme
      - type: volume
        source: logs-00
        target: /logs
    environment:       
      - CF_API_EMAIL=${CF_API_EMAIL}    
      - CF_API_KEY=${CF_API_KEY} 
    command:            
      - --api=true
      - --global.checkNewVersion=true               
      - --log.level=DEBUG                           
      - --log.filePath=/logs/traefik.log            
      - --accessLog.filePath=/logs/access.log       
      - --accessLog.bufferingSize=100              
      - --providers.docker=true                    
      - --providers.docker.exposedbydefault=false  
      - --providers.docker.endpoint=unix:///var/run/docker.sock 
      - --entryPoints.console.address=:8080 
      - --entryPoints.web.address=:80              
      - --entrypoints.websecure.address=:443        
      - --entryPoints.web.http.redirections.entryPoint.to=websecure     
      - --entryPoints.web.http.redirections.entryPoint.scheme=https     
      - --entryPoints.web.http.redirections.entrypoint.permanent=true  

                                                
      - --certificatesResolvers.letsencrypt.acme.email=${CF_API_EMAIL}
      - --certificatesResolvers.letsencrypt.acme.storage=acme/acme.json
      #- --certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory  # Turn on to TEST   
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge=true
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=cloudflare
    labels:                                                           
      - traefik.enable=true     
      - traefik.http.middlewares.admin.basicauth.users=${ADMIN_USER}    
      - traefik.http.routers.thisproxylocal.rule=Host(`${IP_ADDRESS}`)           
      - traefik.http.routers.thisproxylocal.entryPoints=console                     
      - traefik.http.routers.thisproxylocal.service=api@internal                   
      - traefik.http.routers.thisproxylocal.middlewares=admin                     
      - traefik.http.services.thisproxytls.loadbalancer.server.port=8080          
      - traefik.http.routers.thisproxytls.rule=Host(`${HOME_URL}`)             
      - traefik.http.routers.thisproxytls.entrypoints=websecure                     
      - traefik.http.routers.thisproxytls.service=api@internal                    
      - traefik.http.routers.thisproxytls.middlewares=admin                         
      - traefik.http.routers.thisproxytls.tls.certresolver=letsencrypt             
    restart: always
# HEIMDALL
  heimdall:
    image: lscr.io/linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - type: volume
        source: heimdall
        target: /config
    labels:
      - traefik.enable=true
      - traefik.http.routers.heimdall.rule=Host(`heimdall.${DOMAIN}`) || Path(`/heimdall`) 
      - traefik.http.routers.heimdall.entrypoints=websecure
      - traefik.http.routers.heimdall.tls.certresolver=letsencrypt
    restart: unless-stopped
# SONARR -------------
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022 #optional
    volumes:
      - type: volume
        source: sonarr
        target: /config
      - type: volume
        source: tv
        target: /tv
      - type: volume
        source: downloads
        target: /downloads    
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`) || Path(`/sonarr`)
      - traefik.http.routers.sonarr.entrypoints=websecure
      - traefik.http.routers.sonarr.tls.certresolver=letsencrypt
    restart: unless-stopped
# RADARR
  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - type: volume
        source: radarr
        target: /config
      - type: volume
        source: movies
        target: /movies
      - type: volume
        source: downloads
        target: /downloads    
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`) || Path(`/radarr`)
      - traefik.http.routers.radarr.entrypoints=websecure
      - traefik.http.routers.radarr.tls.certresolver=letsencrypt
    restart: unless-stopped
# LIDARR
  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - type: volume
        source: lidarr
        target: /config
      - type: volume
        source: music
        target: /music
      - type: volume
        source: downloads
        target: /downloads 
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.rule=Host(`lidarr.${DOMAIN}`) || Path(`/lidarr`) 
      - traefik.http.routers.lidarr.entrypoints=websecure
      - traefik.http.routers.lidarr.tls.certresolver=letsencrypt
    restart: unless-stopped
# READARR
  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - type: volume
        source: readarr
        target: /config
      - type: volume
        source: ebooks
        target: /books
      - type: volume
        source: downloads
        target: /downloads 
    labels:
      - traefik.enable=true
      - traefik.http.routers.readarr.rule=Host(`readarr.${DOMAIN}`) || Path(`/readarr`)
      - traefik.http.routers.readarr.entrypoints=websecure
      - traefik.http.routers.readarr.tls.certresolver=letsencrypt
    restart: unless-stopped
#PROWLARR
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - type: volume
        source: prowlarr
        target: /config
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN}`) || Path(`/prowlarr`)
      - traefik.http.routers.prowlarr.entrypoints=websecure
      - traefik.http.routers.prowlarr.tls.certresolver=letsencrypt
    restart: unless-stopped
# NZBGET
  nzbget:
    image: lscr.io/linuxserver/nzbget
    container_name: nzbget
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # - NZBGET_USER=admin #optional
      # - NZBGET_PASS=admin #optional
    # ports:
    #   - 6789:6789  
    volumes:
      - type: volume
        source: nzbget
        target: /config
      - type: volume
        source: downloads
        target: /downloads
    labels:
      - traefik.enable=true
      - traefik.http.routers.nzbget.rule=Host(`nzbget.${DOMAIN}`) || Path(`/nzbget`)
      - traefik.http.routers.nzbget.entrypoints=websecure
      - traefik.http.routers.nzbget.tls.certresolver=letsencrypt
    restart: unless-stopped
# OVERSEERR
  overseerr:
    image: lscr.io/linuxserver/overseerr
    container_name: overseerr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - type: volume
        source: overseerr
        target: /config
    labels:
      - traefik.enable=true
      - traefik.http.routers.overseerr.rule=Host(`overseerr.${DOMAIN}`) || Path(`/overseerr`)
      - traefik.http.routers.overseerr.entrypoints=websecure
      - traefik.http.routers.overseerr.tls.certresolver=letsencrypt
    restart: unless-stopped
# TRANSMISSION
  transmission:
    image: lscr.io/linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - type: volume
        source: transmission
        target: /config
      - type: volume
        source: downloads-bt
        target: /downloads
      - type: volume
        source: downloads-bt-watch
        target: /watch  
    labels:
      - traefik.enable=true
      - traefik.http.routers.transmission.rule=Host(`transmission.${DOMAIN}`) || Path(`/transmission`)
      - traefik.http.routers.transmission.entrypoints=websecure
      - traefik.http.routers.transmission.tls.certresolver=letsencrypt  
    restart: unless-stopped
volumes:
  acme-00:
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE-01}/appdata/traefik/acme'
  logs-00:
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE-01}/appdata/traefik/logs'
  heimdall:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE-01}/appdata/heimdall/config'
  downloads:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE-01}/downloads'
  downloads-bt:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE-01}/downloads/bt'
  downloads-bt-watch:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE-01}/downloads/bt/watch'     
  sonarr:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE-01}/appdata/sonarr/config'           
  radarr:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE-01}/appdata/radarr/config'
  readarr:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE-01}/appdata/readarr/config'
  lidarr:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE-01}/appdata/lidarr/config'
  prowlarr:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE-01}/appdata/prowlarr/config'    
  nzbget:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE-01}/appdata/nzbget/config'
  transmission:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE-01}/appdata/transmission/config'    
  overseerr:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE-01}/appdata/overseerr/config' 
  tv:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE_TV}'
  movies:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE_MOVIES}'
  music:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE_MUSIC}'
  ebooks:    
    driver_opts:
      type: 'nfs'
      o: 'addr=${NFS},nolock,soft,rw'
      device: ':${NFS_SHARE_BOOKS}'
              

     
                       